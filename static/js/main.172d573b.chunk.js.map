{"version":3,"sources":["components/Player/mus.mp3","components/Player/Player.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Player","playMy","player","play","render","onClick","id","src","sound","ref","React","Component","App","mark","useState","Array","fill","cellData","setCellData","turn","setTurn","inteleg","setInteleg","count","setCount","combination","RadioHandler","e","currentTarget","value","checkWinner","i","alert","randomTurn","Math","floor","random","newCellData","cellArea","map","cell","className","data","cellIndex","getAttribute","key","setTimeout","handler","window","location","reload","dataAsString","JSON","stringify","localStorage","setItem","getItem","dataAsJson","parse","type","name","checked","htmlFor","href","style","width","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.172d573b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mus.032b32d7.mp3\";","import React from \"react\";\r\n\r\nimport sound from \"../Player/mus.mp3\";\r\n\r\n\r\nclass Player extends React.Component {\r\n\r\n\r\n\r\n     playMy = () => {\r\n         this.player.play();                // same result in JS:    <<-   document.getElementById('sound').play()    ->>\r\n     };\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div>\r\n                <button onClick={this.playMy}>music </button>\r\n                <audio id='sound' src={sound} ref={ref => (this.player = ref)} ></audio>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player;\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Player from \"./components/Player/Player\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const [cellData, setCellData] = useState <any> (Array(9).fill(null));\r\n    const [turn, setTurn] = useState (0);\r\n    const [inteleg, setInteleg] = useState (false);\r\n    const [count, setCount] = useState (0);\r\n\r\n    const combination:Array<any>=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\r\n\r\n    let mark:any\r\n    if (turn % 2 == 0) { mark = \"X\"}\r\n    if (turn % 2 != 0) { mark = \"O\"}\r\n\r\n         const RadioHandler=(e:any)=>{\r\n            if (e.currentTarget.value===\"X\") {\r\n                setTurn(0)}\r\n\r\n            if (e.currentTarget.value===\"O\") {\r\n                setTurn(1)}\r\n         }\r\n\r\n        const handler=(e:any)=>{\r\n        let cellIndex=e.currentTarget.getAttribute(\"data\")\r\n              let copyCellData=[...cellData]\r\n              let newCellData = copyCellData.map((cell:any, key,i) => {\r\n                    if (cellIndex == key && cell==null) {\r\n                                setCount(count+1)\r\n                        setTimeout(()=>{setInteleg(!inteleg)},300)\r\n                                setTurn(turn+1)\r\n                                return mark}\r\n                    else {return cell}     })\r\n            setCellData(newCellData)\r\n            checkWinner(newCellData)\r\n           }\r\n\r\n          let checkWinner=(cellData:any)=>{\r\n        let winner\r\n        for (let i=0; i<8; i++) {\r\n              if ( cellData[combination[i][0]]===cellData[combination[i][1]] &&\r\n                   cellData[combination[i][1]]===cellData[combination[i][2]] &&\r\n                   cellData[combination[i][1]]!= null\r\n                  )\r\n              {alert(cellData[combination[i][1]] + \" win\")}\r\n             }\r\n\r\n    }\r\n\r\n          if (inteleg){\r\n\r\n             let i=1\r\n             while (i<999) {\r\n                        let randomTurn=Math.floor(Math.random()*8)\r\n                            if (cellData[randomTurn]==null){\r\n                                let newCellData=[...cellData]\r\n                                    newCellData[randomTurn]=mark\r\n                                    setInteleg(!inteleg)\r\n                                    setCellData(newCellData)\r\n                                    setTurn(turn+1)\r\n                                    i=999\r\n                            }\r\n                        i++\r\n                    }\r\n          }\r\n\r\n\r\n    let resetGame=()=>{window.location.reload()}\r\n\r\n    let saveGame=()=>{\r\n        const dataAsString = JSON.stringify(cellData);\r\n        localStorage.setItem(\"keyTicToc\", dataAsString)\r\n    }\r\n   let loadGame=()=>{\r\n       const dataAsString = localStorage.getItem(\"keyTicToc\");\r\n       if (dataAsString !== null) {let dataAsJson = JSON.parse(dataAsString);\r\n        setCellData (dataAsJson)}\r\n    }\r\n\r\n\r\n\r\n    let cellArea = cellData.map((cell:any,i:any)=> <div className={\"game_cell\"}\r\n                                                    //@ts-ignore\r\n                                                    data={i}\r\n                                                    onClick={(e)=>handler(e)}>\r\n                                                    <p className={\"mark\"}>{cell}</p>\r\n                                                    </div>)\r\n\r\n\r\n     let music = ()=> {\r\n              alert(\"fgh\")\r\n      }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n             <Player/>\r\n             <button onClick={()=>music()}>sound</button>\r\n\r\n\r\n\r\n            <div className=\"main_container\">\r\n                <div className=\"header\">TIC TOC GAME</div>\r\n                    <div className=\"header_option\">\r\n                        <button className=\"reset_game\" onClick={resetGame}>Reset</button>\r\n                        <div className=\"display\">\r\n                            <span>Сделано ходов</span>\r\n                            <span className=\"score_window\">{count}</span>\r\n                        </div>\r\n                        <div className=\"store_container\">\r\n                            <button className=\"store_button\" onClick={saveGame}>Save</button>\r\n                            <button className=\"store_button\" onClick={loadGame}>Restore</button>\r\n                        </div>\r\n                    </div>\r\n                <div className=\"choice_menu\">\r\n                    <input type=\"radio\" id=\"tic\" name=\"contact\" value=\"X\" onClick={(e) => RadioHandler(e)}\r\n                           checked={true}/>\r\n                    <label htmlFor=\"tic\">Играть крестиками</label>\r\n                    <input type=\"radio\" id=\"toc\" name=\"contact\" value=\"O\" onClick={(e) => RadioHandler(e)}/>\r\n                    <label htmlFor=\"toc\">Играть ноликами</label>\r\n                </div>\r\n                <div className=\"game_box_container\">\r\n                    {cellArea}\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <a href={\"https://rs.school/js/\"}>\r\n                      <img src={\"https://rs.school/images/rs_school_js.svg\"} style={ {width: \"40px\" }  }   />\r\n                    </a>\r\n                    <span className={\"git_link\"}>https://github.com/AMmetro/</span>\r\n                    <span>youtube</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}